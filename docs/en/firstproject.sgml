<chapter><title>Your First Project</title>

<para>The easiest way to give an overview of the functionality of
TaskJuggler is by example.</para>

<sect1><title> Introducing the Example: Accounting Software</title>

<para>Refer to <xref linkend="example"> for a printout of the
example.</para>

<para> It uses a made-up software development project to demontrate
some of the basic features of TaskJuggler. To start a TaskJuggler
project file you need to use the <link linkend="project"> project
</link> attribute. </para>

<para><screen>
project acso "Accounting Software" "$Id" 2002-01-16 2002-04-26 {
  now 2002-03-04
}
</screen></para>

<para>It tells TaskJuggler the default project ID, a short name for
your project, a version number and a start and end date. The start and
end dates don't need to be exact, but must enclose all tasks. It
specifies the time interval the TaskJuggler scheduler will use to fit
the tasks in. </para>

<para>All TaskJuggler properties have a certain number of fixed
attributes and a set of optional attributes. Optional attributes are
always enclosed in curly braces. In this example we use the optional
attributes <link linkend="project_now"> now </link> to set the current
day for the scheduler to another value than the moment your invoke
TaskJuggler. We pick a day during the above specified project period.
So we always get the same results of a TaskJuggler run, no matter when
we process our first project.</para>

<para>Besides finding suitable start and end dates of our project, we
also like to do a simple profit and loss analysis. So we have to
specify the default daily costs of an employee. This can be changed
for certain employees later, but it illustrates an important concept
of TaskJugger - inheritance of attributes. In order to reduce the size
of the TaskJuggler project file to a still readable minimum,
properties inherit many optional attributes from their enclosing
scope. We'll se further down, what this actually means. Here we are at
top-level scope, so this is the default for all following
properties.</para>

<para><screen>
rate 310.0
currency "EUR"
</screen></para>

<para>Macros are another TaskJuggler feature to keep project files
small. Macros are text patterns that can be defined once and inserted
many times further down the project. A macro always has a name and the
text pattern is enclosed by square brackets. </para>

<para><screen>
macro allocate_developers [
  allocate dev1
  allocate dev2 { load 0.5 }
  allocate dev3
]
</screen></para>

<para>To use the macro you simply have to write <computeroutput>
${allocate_developers} </computeroutput> and TaskJuggler will replace
the <computeroutput> ${allocate_developers} </computeroutput> with the
pattern. We will use the macro further down in the example and then
exmplain the meaning of the pattern.</para>

<para>A TaskJuggler feature that you will probably make heavy use of
is <link linkend="flags"> flags </link>. Once declared you can attach
them to many properties. When you generate reports of the TaskJuggler
results, you can use the flags to filter out information and limit the
report to exactly those details that you want included.</para>

<para><screen>
flags team

resource dev "Developers" {
  resource dev1 "Paul Smith" { rate 330.0 }
  resource dev2 "Sébastien Bono"
  resource dev3 "Klaus Müller" { vacation 2002-02-01 - 2002-02-05 }

  flags team
}
resource misc "The Others" {
  resource test "Peter Murphy" { maxeffort 0.8 rate 240.0 }
  resource doc "Dim Sung" { rate 280.0 }

  flags team
}
</screen></para>

<para>This snippit of the example shows the <link linkend="resource">
resource </link> property. Resources always have an ID and a Name. IDs
may only consist of ASCII characters, numbers or the unterline
character. Names are strings and as such enclosed in double quotes.
Strings may contain any character, even non-ASCII characters. As you
can see, resource properties can be nested. <computeroutput> dev
</computeroutput> is a virtual resource, a team, that consists of
three other resources.</para>

<para><computeroutput> dev1 </computeroutput>, alias Paul Smith costs
more than the normal employee. So the declaration of <computeroutput>
dev1 </computeroutput> overwrites the inherited default rate with a
new value of 330.0. The default value has been inherited from the
enclosing scope, resource <computeroutput> dev </computeroutput>.
Which in turn has it inherited from the global scope. </para>

<para>The declaration of the resource Klaus M&uml;ller uses another
optional attribute. With <link linkend="resource_vacation"> vacation
</link> you can specify a certain time interval where the resource is
not available.</para>

<para>Here you need to understand how TaskJuggler handles time
intervals. Internally TaskJuggler uses the number of seconds after
January 1st, 1970 to store any date. So all dates are actually stored
with an accuracy of 1 second. <computeroutput> 2002-02-01
</computeroutput> specifies midnight February 1st, 2002. Again
following the TaskJugger concept of needing as little info as needed and
extending the rest with sensible defaults, TaskJuggler adds the time
0:00:00 if nothing else has been specified. So the vacation ends on
midnight February 5th, 2002. Well, almost. Everytime you specify a
time interval, the end date is not included in the interval. But the
second before the date that you have specified is. So Klaus
M&uml;llers vacation ends 23:59:59 on February 4th, 2002.<para>

<para>Peter Murphy only works 6.5 hours a day (actually 6.4 hours). So
we use the <link linkend="resource_maxeffort"> maxeffort </link>
attribute to limit his daily working hours. We could also define exact
working hours using the <link linkend="shift"> shift </link> property,
but we ignore this for now. </para>

<para>Note that we have attached the flag <computeroutput> team
</computeroutput> after the declaration of the sub-resources to the
team resources. This way, they flags don't get inherited by the
sub-resources. If we would have declared the flags before the
sub-resources, then they would have the flags attached as well.</para>

<para>The use of our resources will create costs. For a profit and
loss analysis, we need to balance the costs agains the customer
payments. So that we don't get lost with all the amounts, we declare 3
accounts to credit the amounts to. We create one account for the
development costs, one for the documentation costs and one for the
customer payments.</para>

<para><screen>
account dev "Development" cost
account doc "Dokumentation" cost
account rev "Payments" revenue
</screen></para>

<para>The <link linkend="account"> account </link> property has 3
fixed attributes, an ID, a name and a type. The type can either be
<computeroutput> cost </computeroutput> or <computeroutput> revenue
</computeroutput>. For the analysis TaskJuggler subtracts the total
amount of all cost accounts from the total amount from all revenue
accounts. </para>

<para>Let's focus on the real work now. The project should solve a
problem - the creation of an accounting software. Since the job is
quite complicated we break it down into serveral sub tasks. We need to
do a specification, develop the software, test the software and write
a manual. In TaskJuggler syntax this would look like this:

<para><screen>
task AcSo "Accounting Software" {
  task spec "Specification" 
  task software "Software Development"
  task test "Software testing"
  task deliveries "Milestones"
}
</screen></para>

<para>Just like resources, tasks are declared by using the <link
linkend="task">task</link> keyword followed by an ID and a name
string. All TaskJuggler properties have their own namespaces. This
means, that it is quite ok to have a resource and a task with the same
ID. Tasks may have optional attributes which can be tasks again, so
tasks can be nested.</para>

<para>To track important milestones of the project, we also added a
task called Milestones. This task, like most of the other task will
get some sub tasks later on. We consider the specification task simple
enough that we don't have to break it into further sub tasks. So let's
add some more details to it.

<para><screen>
  task spec "Specification" {
    effort 20d
    ${allocate_developers}
    depends !deliveries.start
  }
</screen></para>

<para>The effort to complete the task is specified with 20 man days.
Alternativly we could have used the <link
linkend="task_length">length</link> attribute or the <link
linkend="task_duration">duration</link> attribute.
<computeroutput>length</computeroutput> specifies the duration of the
task in working days while <computeroutput>duration</computeroutput>
specifies the duration in calendar days. Contrary to <link
linkend="task_effort">effort</link> these two need no specification of
the involved resources. Since <computeroutput>effort</computeroutput>
specifies the duration in man days, we need to say who should be
allocated to the task. Here we use the above mentioned macro
<computeroutput>allocate_developers</computeroutput>. The
expression</para>

<para><screen>
    ${allocate_developers}
</screen></para>

<para>is simply expanded to</para>

<para><screen>
  allocate dev1
  allocate dev2 { load 0.5 }
  allocate dev3
</screen></para>

<para>If you need to allocate the same bunch of people to serveral
task, the macro saves you some writing. You could have written the
<link linkend="task_allocate">allocate</link>-attributes directly instead
of using the macro. Since the allocation of multiple resources to a
task is a very common place for macro usage, we found it a good idea
to use it in this example as well.</para>

<para>One more interesting thing to note is the fact that we like
the resource <computeroutput>dev2</computeroutput> only to work 50% of
the day on this task, so we use the optional attribute <link
linkend="task_allocate_load">load</link> to specify this.</para>

<para>For TaskJuggler to schedule a task it needs to know either the
start and end criteria of a task, or one of them and a duration
specification. The start and end criteria can either be fixed dates or
relative dates. Relative dates are specification of the type "task B
starts after task A has finished". Or in other words, task B depends
on task A. In this example the specification task depends on a
sub tasks of the deliveries tasks. We haven't specified it yet, but it
has the ID <computeroutput>start</computeroutput>.<para>

<para>To specify the dependency between the two task we use the <link
linkend="task_depends">depends</link> attribute. The attribute must be
followed by one or more task IDs. If more than one ID is specified,
each ID has to be seperated with a comma from the previous one. Task
IDs can be either absolute IDs or relative IDs. An absolute ID of a
task is the ID of this task prepended by the IDs of all enclosing
tasks. The task IDs are seperated by a dot from each other. The
absolute ID of the specification task would be
<computeroutput>AcSo.spec</computeroutput>.</para>

<para>Relative IDs always start with one or more exclamation marks.
Each exclamation mark moves the scope to the next enclosing task. So
<computeroutput>!deliveries.start</computeroutput> is expanded to
<computeroutput>AcSo.deliveries.start</computeroutput> since
<computeroutput>AcSo</computeroutput> is the enclosing task of
<computeroutput>deliveries</computeroutput>. Relative task IDs are a
little bit confusing at first, but have a real advantage over absolute
IDs. Sooner or later you want to move tasks around in your project and
then it's a lot less likely that you have to fix dependency
specifications of relative IDs.</para>

<para>The software development task is still too complex to specify it
directly. So we split it into sub tasks again.</para>

<para><screen>
  task software "Software Development" {
    priority 1000
    task database "Database coupling"
    task gui "Graphical User Interface"
    task backend "Back-End Functions"
  }
</screen></para>

<para>We use the <link linkend="task_priority">priority</link>
attribute to mark the importance of the tasks. By default all tasks
have a priority of 500 unless the parent tasks specifies it
differently. Setting the priority to 1000 marks the task as most
important task, since the possible range is 1 (not important at all)
to 1000 (ultimately important).
<computeroutput>priority</computeroutput> is an attribute that is
inherited to sub tasks if specified before the sub tasks declaration.
</para>

<para><screen>
    task database "Database coupling" {
      effort 20d
      depends !!spec
      allocate dev1
      allocate dev2
    }
</screen></para>

<para>The work on the database coupling should not start before the
specification has been finished. So we use again the <link
linkend="task_depends">depends</link> attribute to let TaskJuggler
know about this. This time we use two exclamation marks for the
relative ID. The first one puts us in the scope of the enclosing
<computeroutput>software</computeroutput> task. The second one is to
get into the <computeroutput>AcSo</computeroutput> scope that contains
the <computeroutput>spec</computeroutput> tasks. This time we allocate
resources directly without using a macro.</para>

<para><screen>
    task gui "Graphical User Interface" {
      effort 35d
      actualeffort 40d
      depends !database, !backend
      allocate dev2
      allocate dev3
    }
</screen></para>

<para>TaskJuggler can schedule your project for two different
scenarios. The first scenario is called the plan scenario. The other
is referred to as actual scenario. Many of the reports allow you to
put the values of both scenarios side by side to each other, so you
can compare the two scenarios. The two scenarios must have the same
task structure and the same dependencies. But the start and end dates
of tasks as well as the duration may vary. In the example we have
planed the work on the graphical user interface to be 35 man days. It
turned out that we actually needed 40 man days. The <link
linkend="task_actualeffort">actualeffort</link> attribute can be used
to specify this.</para>

<para><screen>
    task backend "Back-End Functions" {
      effort 30d
      complete 95
      depends !database, !!spec
      allocate dev1
      allocate dev2
    }
</screen></para>

<para>By default TaskJuggler assumes that all tasks are on schedule.
Sometimes you want to generate reports, that show how much of a task
has actually been completed. TaskJuggler uses the current date for
this unless you have specified another date using the <link
linkend="project_now">now</link> attribute. If a task is ahead of
schedule or late can be specified using the <link
linkend="task_complete">complete</link> attribute. This specifies how
many percent of the task have been completed up to the current date.
In our case the back-end implementation is slightly ahead of schedule
as we will see from the report.</para>

<para><screen>
  task test "Software testing" {

    task alpha "Alpha Test" {
      effort 1w
      depends !!software
      allocate test
      allocate dev2
    }

    task beta "Beta Test" {
      effort 4w
      depends !alpha
      allocate test
      allocate dev1
    }
  }
</screen></para>

<para>The software testing task has been split up into an alpha and a
beta test task. The interesting thing here is, that efforts can not
only be specified as man days, but also man weeks, man hours, etc. Per
default TaskJuggler assumes a man week is 40 man hours or 5 man days.
These values can be changed using the <link
linkend="project_dailyworkinghours">dailyworkinghours</link>
attribute.</para>

<para>Let's go back to the outermost task again. At the beginning of
the example we stated that we want to credit all development work to
one account with ID <computeroutput>dev</computeroutput> and all
documentation work to the account
<computeroutput>doc</computeroutput>. To achive this, we use the
attribute account to credit all tasks to the
<computeroutput>dev</computeroutput> account.</para>

<para><screen>
task AcSo "Accounting Software" {

  account dev

  task software "Software Development" {
</screen></para>

<para>Since we specify the attribute for the top-level task before we
declare any sub tasks, this attribute will be inherited by all sub
tasks and their sub tasks and so on. Since the only exception is the
writing of the manual, we need to change the account for this task
again since it is also a sub task of
<computeroutput>AcSo</computeroutput>.</para>

<para><screen>
  task manual "Manual" {
    effort 10w
    depends !deliveries.start
    allocate doc
    allocate dev3
    account doc
  }
</screen></para>

<para>All task that have been discussed so far, had a certain duration. We
did not specify the duration explicitly, but we expect them to last
for a certain period of time. Sometimes you just want to capture a
certain moment in your project plan. These moments are usually called
milestones since they have some level of importance for the progress
of the project.</para>

<para>TaskJuggler has support for milestones as well. They are handled
as special types of tasks. By using the optional attribute
<link linkend="task_milestone">milestone</link> for a task, this task
is declared a milestone. Milestones have no duration, so it's illegal
to specify any duration criteria, or a non identical start and end
date.</para>

<para><screen>
  task deliveries "Milestones" {

    account rev

    task start "Projectstart" {
      milestone
      start 2002-01-16
      actualstart 2002-01-20
      startcredit 33000.0
    }

    task prev "Technology Preview" {
      milestone
      depends !!software.backend
      startcredit 13000.0
    }

    task beta "Betaversion" {
      milestone
      depends !!test.alpha
      startcredit 13000.0
    }

    task done "Ship Product to customer" {
      milestone
      # maxend 2002-04-17
      depends !!test.beta, !!manual
      startcredit 14000.0
    }
  }
}
</screen></para>

<para>We have put all important milestones of the project as sub tasks
of the <computeroutput>deliveries</computeroutput> task. This way they
show up nicely grouped in the reports. All milestone have either a
dependency or a fixed start date. For the first milestone we have used
the attribute <link linkend="task_start">start</link> to set a fixed
start date. All other tasks have direct or indirect dependencies on
this task. Moving back the start date will slip the whole project.
This has actually happenend, so we use the <link
linkend="task_actualstart">actualstart</link> attribute to specify the
real start of the project 4 days later.</para>

<para>Every milestone is linked to a customer payment. By using the
<link linkend="task_startcredit">startcredit</link> attribute we can
credit the specified amount to the account associated with this task.
Since we have assigned the <computeroutput>rev</computeroutput>
account to the enclosing task, all milestones will use this account as
well.

<para>Now the project has been completely specified. Stopping here would
result in a valid TaskJuggler file that could be processed and
scheduled. But no reports would be generated to visualize the
results.</para>

<para>TaskJuggler offers a number of report types. Probably the most
popular ones are the HTML reports. You can advice TaskJuggler to
generate one or more HTML pages that contains lists of your tasks,
resources or accounts.</para>

<para>Before we start with the reports, we present you another macro.
We like to add a navigation bar to each HTML page that holds a number
of buttons. Each button changes the page to another report. This way
we can create a navigation bar that holds links to all reports. Since
we have created a macro, we can add the navigation bar to all reports
without much hassle. The navigation bar is constructed with HTML tags.
If you are not familiar with HTML this will look very strange to you.
Don't worry, this is just a cool feature we like to demonstrate. You
can use TaskJuggler to it's full extend without having to learn HTML
code.</para>

<para>The HTML code is injected into the reports using the <link
linkend="htmltaskreport_rawhead">rawhead</link> attribute. This will
put the HTML code close to the top of the HTML page right after the
body started. As you can see here, string parameters of attributes can
be enclosed in single quotes as well. This is handy, if the string
itself needs to contain doublequotes.</para>

<para><screen>
macro navbar [
rawhead
  '&lt;p&gt;&lt;center&gt;
  &lt;table border="2" cellpadding="10"&gt;
  &lt;tr&gt;
    &lt;td class="default" style="font-size:120%" rowspan="2"&gt;
    &lt;a href="Tasks-Overview.html"&gt;Tasks Overview&lt;/td&gt;
    &lt;td class="default" style="font-size:120%" rowspan="2"&gt;
    &lt;a href="Tasks-Details.html"&gt;Tasks Details&lt;/td&gt;
    &lt;td class="default" style="font-size:120%" rowspan="2"&gt;
    &lt;a href="Staff-Overview.html"&gt;Staff Overview&lt;/td&gt;
    &lt;td class="default" style="font-size:120%" rowspan="2"&gt;
    &lt;a href="Staff-Details.html"&gt;Staff Details&lt;/td&gt;
    &lt;td class="default" style="font-size:120%" rowspan="2"&gt;
    &lt;a href="Accounting.html"&gt;Accounting&lt;/td&gt;
    &lt;td class="default" style="font-size:120%" rowspan="2"&gt;
    &lt;a href="acso.eps"&gt;GANTT Chart (Postscript)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;/table&gt;
  &lt;/center&gt;&lt;/p&gt;&lt;br&gt;'
]
</screen></para>

<para>As the first report, we would like to have a general overview of all
tasks with their computed start and end dates. For better
readability we include a calendar like column that lists the effort
for each week.</para>

<para><screen>
htmltaskreport "Tasks-Overview.html" {
  ${navbar}
  columns no, name, start, end, weekly, effort
  headline "Accounting Software Project"
  caption "This table shows the load for each task on a weekly basis.
  All values are man-days."
}
</screen></para>

<para>
# Now a more detailed report that shows all jobs and the people
# assigned to the tasks. It also features a comparison of the plan and
# actual scenario.
</para>

<para><screen>
htmltaskreport "Tasks-Details.html" {
  ${navbar}
  columns no, name, start, end, daily
  headline "Accounting Software Project"
  caption "This table shows the load of each day for all the tasks.
  Additionally the resources used for each task are listed. Since the
  project start was delayed, the actual schedule differs significantly
  from the original plan."
  hideresource 0
  showactual
}
</screen></para>

<para>
# The previous report listed the resources per task. Now we generate a
# report the lists tasks per resource.
</para>

<para><screen>
htmlresourcereport "Staff-Overview.html" {
  ${navbar}
  columns no, name, weekly, effort
  showactual
  loadunit hours
  headline "Weekly working hours for the Accounting Software Project"
}
</screen></para>

<para>
# Now a report similar to the above one but with much more details.
</para>

<para><screen>
htmlresourcereport "Staff-Details.html" {
  ${navbar}
  columns name, daily, effort
  showactual
  hidetask 0
  hideresource team
  sortresources nameup
  loadunit hours
  headline "Daily working hours for the Accounting Software Project"
}
</screen></para>

<para>
# To conclude the HTML reports a report that shows how badly the
# project is calculated.  The company won't get rich with this
# project. Due to the slip, it actually needs some money from the bank
# to pay the salaries.
</para>

<para><screen>
htmlaccountreport "Accounting.html" { ${navbar}
  columns no, name, total, monthly 
	headline "P&amp;L for the Accounting Software Project" 
	caption "The table shows the profit and loss analysis as well as the
	         cashflow situation of the Accounting Software Project."
  accumulate showactual
}
</screen></para>

<para>
# Finally we generate an XML report that contains all info about the
# scheduled project. This will be used by tjx2gantt to create a nice
# GANTT chart of our project.
</para>

<para><screen>
xmlreport "AccountingSoftware.tjx"
</screen></para>

</chapter>
