<!doctype linuxdoc system>
<article>
<title>The TaskJuggler Manual
<author>Chris Schlaeger <tt>cs@suse.de</tt>,
Marc R&uuml;hrschneck <tt>mac@suse.de</tt>
<date>Version @VERSION@, Thu Feb 14 14:33:25 CET 2002
<abstract>
This document describes TaskJuggler version @VERSION@

</abstract>

<toc>

<sect>Introduction
<p>
<sect1>About TaskJuggler
<p>

TaskJuggler is a project management tool for Linux and UNIX
system-based operating systems. Whether you want to plan your
college's shifts for the next month or want to build a skyscraper -
TaskJuggler is the tool for you.

Instead of clicking yourself painfully through hundreds of dialog
boxes you specify your TaskJuggler project in a simple text format.
You simply list all your tasks and their dependencies. The information
is sent through TaskJuggler and you will get all sorts of reports in
HTML or XML format.

TaskJuggler does not only honor the task interdependencies but also
takes resource constrains into account. Using TaskJuggler's powerful
filtering and reporting algorithms you can create task lists, resource
usage tables, status reports, project calendars and project accounting
statements.

<p>
<sect1>Features and Highlights
<p>
<itemize>
<item>Automatic scheduling of interdependent tasks with resource
conflict solver.
<item>Powerful project description syntax with macro support.
<item>Flexible working hours and vacation handling.
<item>Support for shifts.
<item>Multiple time zone support.
<item>Flexible resource grouping.
<item>Project accounting support.
<item>Task may have initial costs, finishing costs.
<item>Resource may have running costs.
<item>Support for simple profit/loss analysis.
<item>HTML and XML report generation.
<item>Support for plan and actual scenario comparisons.
<item>Project tracking support.
<item>Groupware support by using a revision control system such as CVS
or RCS on the project description files.
<item>Support for central resource allocation database.
</itemize>

<sect1>TaskJuggler on the Web
<p>
The official TaskJuggler web page can be found at <htmlurl
url="http://www.suse.de/~freitag/taskjuggler"
name="http://www.suse.de/~freitag/taskjuggler">.

<sect1>Change Log

<sect2>Version 1.0.0 (2002-03-14)
<p>
<itemize>

<item>Initial stable public release

</itemize>

<sect2>Version 1.0.1 (2002-03-15)
<p>
<itemize>

<item>Fixed completely broken global vacation handling

<item>Added test case for vacation handling to test suite

</itemize>

<sect2>Version 1.1 (2002-05-27)
<p>
<itemize>

<item> Added some reports to the example file, so users actually get a
result of the TaskJuggler run. 

<item> Support for later completion of task and resources added. By
writing 'supplement task &lt;ID&gt; { ... }' an already defined task
can be extended. So it's easier now to create a file which contains
the vacations for all resources separate from the resource definition
itself.

<item>Extended expression parser to work on string type values as well.

<item><ref name="Logical expressions" id="logicalexpression"> for
hidetask, rolluptask etc. can now contain functions as well. Currently
there is support for 'istask', 'isresource', 'isaccount',
'issubtaskof', 'contains', 'ismilestone'.

<item>Moved the docs directory from TaskJuggler subdir to topdir.

<item>Added feature list and change-log to the documentation.

<item><ref name="Property reference" id="reference"> is now sorted in
alphabetical order. 

<item>Added lots of missing attributes to <ref
name="htmlaccountreport" id="htmlaccountreport">.

<item>Added missing <ref name="export" id="export"> report to
documentation. Export reports can now contain the scheduled tasks as
well as the resource allocations.

<item>New keywords <tt/planbooking/ and <tt/actualbooking/ to enter
fixed bookings of <ref name="resources" id="resource"> in the resource
declaration.

<item>Added new example project to illustrate the use of export in big
projects that are split into sub projects.

<item>HTML comment in HTML report files is now using correct syntax.

<item>Partial fix for correct time zone handling.

<item>Support for STDIN reading and STDOUT writing added. This can be
used when calling TaskJuggler from CGI scripts.

</itemize>

<sect2>Version 1.2 (2002-06-17)
<p>
<itemize>

<item>Fixed sorting by ID for all HTML reports.

<item>Fixed bug in vacation handling. Vacations that started before
the project were silently ignored.

<item>Added support for <ref name="taskattributes"
id="export_taskattributes">.

<item>XML Output changes: Basically the XML output is more simple to parse,
some values were added and corrected. 

<item>Added a first simple TaskJuggler XML-output viewer for KDE. 
See ktjview/README for installation. Configure with KDE support enabled.

<item>Disabled ical support by introducing the HAVE_ICAL switch in the code.
The switch is not yet configure supported, but building with --with-kde-support
should work now without failing on missing libical.

<item>Support for URLs in HTML reports added.

<item>Legacy HTML elements have been removed from HTML reports.
TaskJuggler now creates pure HTML 4.0 code.

<item>Added support for insertion of raw HTML code into reports. This
can be achived with <ref name="rawhead" id="htmltaskreport_rawhead">
and <ref name="rawtail" id="htmltaskreport_rawtail">.

<item>Added support for user defined style sheets in HTML reports by
using the <ref name="rawstylesheet" id="htmltaskreport_rawstylesheet">
attribute.

<item>Strings can now be enclosed in either single or double quotes. A
single quoted string may contain double quotes and vice versa.

<item>Working hours can now be declared on project level. This also
determines if a day is considered a working day or not.

<item>With <ref id="task_startbuffer" name="startbuffer"> and <ref
id="task_endbuffer" name="endbuffer"> you can now specify that there
might be some air left in a certain task.

<item>Remo's GANTT chart generators have been included in the
<tt/Contrib/ directory.

</itemize>

<sect2>Next Release (some day)
<p>
<itemize>

<item>Added support for shifts in <ref id="task_shift" name="tasks">
and task <ref id="task_allocate_shift" name="allocations">.

<item>Fixed vim syntax highlighting. Some keywords were missing.

</itemize>

<sect>Installation
<p>
<sect1>Obtaining TaskJuggler 
<p>

TaskJuggler may be obtained from the following web site:

<htmlurl url="http://www.suse.de/~freitag/taskjuggler"
name="http://www.suse.de/~freitag/taskjuggler/">

<sect1>Requirements
<p>

To build and run TaskJuggler, you need:

<itemize>

<item>qt3 &mdash; The <htmlurl url="ftp://ftp.trolltech.com/qt/source"
name="qt c++ class library"> version 3

<item> gcc 2.95 &mdash; The <htmlurl url="ftp://ftp.gnu.org/gnu"
name="GNU C compiler"> version 2.95. The c++ extensions must be
available.

</itemize>

This version of TaskJuggler was built and tested on SuSE Linux 8.0 on
various hardware platforms.

<sect1>Compilation and Installation
<p>

To compile and install TaskJuggler on your system, type the following 
in the base directory of the TaskJuggler distribution:

<tscreen><verb>
% ./configure
% make
% make install
</verb></tscreen>

<p>
Since TaskJuggler uses <tt/autoconf/, you should have no trouble
compiling it.  If you have problems, please report them to the
TaskJuggler developers mailing list at <htmlurl
url="mailto:taskjuggler-devel@suse.de"
name="taskjuggler-devel@suse.de"> in English.


<p>
<sect> Usage <p>
<sect1> Basics
<p>

TaskJuggler uses one or more text files to describe a project. The main
project should be placed in a file with the <tt/.tjp/ extension. This
main project may contain several subprojects. Such subprojects should be
placed in files with the <tt/.tjsp/ extension. These subprojects are
included in the main project during compile time.

<sect1> General Usage
<p>

TaskJuggler works like a compiler. You provide the source files, it computes
the contents and creates the output files.

<p>
After you created the project description file, have TaskJuggler 
compute and create the output. For example, if you have created the
<tt>AcSo.tjp</tt> project file. You need to send this file to TaskJuggler then:

<tscreen><verb>
% taskjuggler AcSo.tjp
</verb></tscreen>

TaskJuggler will try to schedule all tasks with the specified
conditions and generate the reports that were requested with the <ref
id="htmltaskreport" name="htmltaskreport">, <ref
id="htmlresourcereport" name="htmlresourcereport"> or other report
attributes in the input file(s).

Calling TaskJuggler with . as input filename will cause reading from
stdin. To redirect output to stdout you can specify -- as filename
for reports. This feature can for example be used to generate dynamic
html pages from CGI scripts.

<sect1> The Command Line Options
<p>

To get a list of the command line options of TaskJuggler, use the <tt>--help</tt>
option:

<tscreen><verb>
% taskjuggler --help
</verb></tscreen>

<sect1> Reporting Bugs and Sending Feedback
<p>
All official releases of TaskJuggler are meant to be stable releases
unless explicitly noted differently. But our test suite is still very
small and some features cannot be tested automatically very well. So
it's very likely that your current version of TaskJuggler contains
bugs. If you find a bug please follow this procedure:

<itemize>

<item>Read this manual to make sure that it is actually a bug and not
a feature.

<item>Check the TaskJuggler <htmlurl
url="http://www.suse.de/~freitag/taskjuggler" name="web page">.
Possibly the bug was already found and a patch or workaround exists.

<item>Try to create a test project that is as small as possible but
still reproduces the bug.

<item>Send the test project and a detailed description of the problem
to the developer mailing list at <htmlurl
url="mailto:taskjuggler-devel@suse.de"
name="taskjuggler-devel@suse.de">.

</itemize>

<sect>An Example
<p>

The easiest way to give an overview of the functionality of TaskJuggler is
with an example.

<sect1> Introducing the Example: Accounting Software
<p>

Refer to section <ref id="example" name="The Example: Accounting
Software"> for a printout of the example.

In this project, we plan to create an accounting program. The project
starts on January 16, 2002, and its end is planned for June 30, 2002. The
project will consist of the following tasks:

<descrip>
<tag/Specification/The developers set up the specification for the
software and documentation.
<tag/Software development/This is the whole process of coding the software. It
includes the following subtasks:
  <descrip>
  <tag/Database coupling/Connection procedures to the database.
  <tag/Graphical user interface/Creating the user interface.
  <tag/Back-end functions/Creating the calucation and computing routines for the
  data.
  </descrip>

<tag/Software testing/Testing the software. There are two stages of software
testing:
  <descrip>
  <tag/Alpha test/Test the software in alpha stage.
  <tag/Beta test/Test the software in beta stage. The customer normally takes
  part in this beta test phase.
  </descrip>

<tag/Manual/Creating the printed user manual

<tag/Ship to customer/This task includes all steps necessary to communicate
to the customer. This is an important task, as it defines the basic milestones
of the project. For example, we cannot start the project before the contract
is signed. It is also important to check the planned date of shipping the
software to the customer.

This process consist of the following subtasks:
  <descrip>
  <tag/Projectstart/This milestone defines the start of the project.
  <tag/Betaversion/This marks the start of the beta test. Normally, the
  customer wants to see a beta version, so this is also a milestone.
  <tag/Ship product to customer/This is the date when the project has ended.
  Software is in final stage, the manual is ready and printed, and everything is
  shipped to the customer.
  </descrip>
</descrip>

<sect> The Basic Parts of a <tt>.tjp</tt> File
<p>

This section gives an overview of the most important commands, properties,
and attributes used in a typical project file. Refer to <ref
id="reference" name="Property Reference"> for a complete list of commands and
properties usable in project files.

<descrip>
<tag>project acso "Accounting Software" "1.0" 2002-01-16 2002-06-30</tag>

This statement informs TaskJuggler about the most important things on the
project. These things include:

<descrip>
<tag/fibu/The project ID, unique within the scope of the project
<tag/Accounting Software/The short description of the project
<tag/1.0/The version of the schedule
<tag/2002-01-16 2002-6-30/Begin and end dates of the project
</descrip>

Refer to the <ref id="project" name="project"> command in the reference
for details.

<tag>resource dev "Developers" { ... }</tag>

This defines a resource with the unique ID <tt/dev/. It will be shown as
<tt/Developers/ on the schedule later.

<descrip>
<tag/dev/The resource ID, unique for TaskJuggler
<tag/Developers/The real name of the resource
</descrip>

In the example, the resource consists of the three developers (<tt/dev1/,
<tt/dev2/, and <tt/dev3/). For every resource, you can specify additional
attributes in separate curly braces {}.

Refer to the <ref id="resource" name="resource"> command in the
reference for details.

<tag>task AcSo "Accounting Software" { ... }</tag>

This defines the task <tt/AcSo/. In this example, it represents the whole
project to build the Accounting Software. A task may contain several subtasks.

Refer to the <ref id="task" name="task"> command in the reference.

<tag>htmltaskreport "tasks.html" name,start,end,resources,weekly</tag>

This command creates a task-based report in html and saves it as
<tt/tasks.html/ to the current directory. The report will include the task
name, start and end of the task, and the necessary resources. The report's 
resolution will be in weeks.

Refer to the <ref id="htmltaskreport" name="htmltaskreport"> command in
the reference for details.
</descrip>

<sect> Other Useful Commands and Environments
<p>

<descrip> 
<tag> <tt/now 2002-02-17/</tag>

This sets the current date to 2002-02-17. This is the day or week that will be
highlighted in the report later. This helps with printing and creating reports for
the future.

<tag> <tt/rate 310.0/</tag>

<tag> <tt/currency "EUR"/</tag>

Sets the global monetary currency to Euro. It is used for printing out cost and
revenue values in the correct currency.

<tag> <tt/account dev "Development" cost {}/</tag>

This creates an account <tt/dev/ as a <tt/cost/ account. There is also a
account type <tt/revenue/, which is used to cover all kinds of income (see
reference: <ref id="account" name="account">).
</descrip>

<sect>Property Reference<p><label id="reference">

<bf>Comments</bf><p><label id="comments">
There are two ways to annotate a project file with comments. All text
after a '#' will be ignored. Comments that span multiple rows must be
started with '/*' and ended with '*/'.

<descrip>

<label id="date"><tag/DATE/A DATE is an ISO-compliant date in the
format YYYY-MM-DD[-hh:mm[:ss]][-TIMEZONE]. Hour, minutes,
seconds and the TIMEZONE are optional. If not specified, the values
are set to 0. The local timezone is used if no other is specified. If
the timezone is not known taskjuggler will fall back to UTC. See
the source code (taskjuggler/Utility.cpp) for details. 

<label id="global_id"><tag/GLOBAL_ID/A GLOBAL_ID may have the same
characters as ID, but additionally may contain '.' and '!'. '!' may
only be used at the beginning and is used in relative IDs. A '!' means
one level up.

<label id="id"><tag/ID/A string that may consist of the characters
A-Z, a-z, 0-9, and _.  It may not start with a number.

<label id="integer"><tag/INTEGER/A number that is an integer.

<label id="logicalexpression"><tag/LOGICALEXPRESSION/This is a logical
expression consisting of logical operations, such as '&' for and, '|'
for or, and '&tilde;' for not, to operate on INTEGER values or
symbols. As symbols flag names and certain functions are supported.
The expression is evaluated from left to right. '&tilde;' has a higher
precedence than other operators. Use braces to avoid ambiguous
operations. If flagFoo, flagFooBar, and flagBar are declared flags,
the following example is a correct expression:

(flagFoo | flagFooBar) & &tilde;flagBar

The following functions can be used in logical expressions:

<descrip>
<tag/containstask(<ref id="id" name="ID">)/ true if the task has task
ID as sub task.  <tag/ismilestone()/ true if the task is a milestone.
<tag/issubtask(<ref id="id" name="ID">)/ true if the task is a sub
task of task ID.  <tag/istask(<ref id="id" name="ID">)/ true if the
tasks has the listed ID.  <tag/isresource(<ref id="id" name="ID">)/
true if the resource has the listed ID.  <tag/isaccount(<ref id="id"
name="ID">)/ true if the account has the listed ID.
</descrip>

<label id="real"><tag/REAL/A real number (e.g., 3.14).

<label id="sortingcriteria"><tag/SORTINGCRITERIA/See attribute
description for allowed values.

<label id="string"><tag/STRING/A string may contain any characters and
is enclosed in single quotes or double quotes. A single quoted string
may contain double quote characters and vice versa. A string may
include line breaks.

<label id="time"><tag/TIME/A time in the format HH:MM.

<label id="unit"><tag/UNIT/May be h for hours, d for days, w for weeks, m for months, y for
years.

<label id="weekday"><tag/WEEKDAY/May be
<descrip>
<tag/mon/ for Monday
<tag/tue/ for Tuesday
<tag/wed/ for Wednesday
<tag/thu/ for Thursday
<tag/fri/ for Friday
<tag/sat/ for Saturday
<tag/sun/ for Sunday
</descrip>

</descrip>

Optional attributes of a property must be enclosed by {}.

<sect1>account &lt;id&gt; &lt;name&gt; &lt;type&gt;<label id="account">
<p>
id: <ref id="id" name="ID">

name: <ref id="string" name="STRING">

type: <ref id="id" name="ID">

<bf/Optional attributes:/
<descrip>
<label id="account_account">
<tag/account &lt;id&gt; &lt;name&gt;/
Accounts may be nested. An account that has subaccounts may not have
a balance or a kotrusid.


<label id="account_credit">
<tag/credit &lt;date&gt; &lt;description&gt; &lt;amount&gt;/
date: <ref id="date" name="DATE">

description <ref id="string" name="STRING">

amount: <ref id="real" name="REAL">

Credits the specified amount to the account at the specified date. The
description should contain some information about the reason for the
transaction.


<label id="account_kotrus_id">
<tag/kotrusid &lt;id&gt;/
id: <ref id="string" name="STRING">

The KoTrus <ref id="id" name="ID"> of the account (cost object).
This is a special reserved keyword.  
</descrip>

Declares an account. Accounts can be used to calculate costs of tasks
or the whole project. Account declaration may be nested, but only the
top level accounts may have a type attribute specified. All
subaccounts inherit this type. The type may be <tt/cost/ or <tt/revenue/.

See also: <ref name="htmlaccountreport" id="htmlaccountreport">


<label id="copyright">
<sect1>copyright &lt;text&gt;

Define the copyright or other legal statement for your project
reports. The text will appear underneath the HTML reports right next
to the TaskJuggler version information.


<label id="currency">
<sect1>currency &lt;text&gt;
<p>
text: <ref id="string" name="STRING">

The currency for money values in reports.

See also: <ref name="account" id="account">, <ref
name="currencydigits" id="currencydigits">


<sect1>currencydigits &lt;number&gt;<label id="currencydigits">
<p>
number: <ref id="integer" name="INTEGER">

The number of decimal digits used for currency values.

See also: <ref name="account" id="account">, <ref name="currency" 
id="currency">


<label id="export">
<sect1>export &lt;filename&gt;<label id="export">
<p>
filename: <ref id="string" name="STRING">
<p>
<bf/Optional attributes:/
<descrip>
<label id="export_hideresource">
<tag/hideresource &lt;expression&gt;/
expression: <ref id="logicalexpression" name="LOGICALEXPRESSION">

Report only resources that do not have flags meeting the described logical
expression.

<label id="export_hidetask">
<tag/hidetask &lt;expression&gt;/
expression: <ref id="logicalexpression" name="LOGICALEXPRESSION">

Report only tasks that do not have flags meeting the described logical
expression.

<label id="export_rollupresource">
<tag/rollupresource &lt;expression&gt;/
expression: <ref id="logicalexpression" name="LOGICALEXPRESSION">

Do not show subresources of resources with flags meeting the described
logical expression.

<label id="export_rolluptask">
<tag/rolluptask &lt;expression&gt;/
expression: <ref id="logicalexpression" name="LOGICALEXPRESSION">

Do not show subtasks of tasks with flags meeting the described
logical expression.

<label id="export_taskattributes">
<tag/taskattributes &lt;attributeID&gt;[, &lt;attributeID&gt; ... ]/

attributeID: The list of attribute names specifies which task
attributes should be listed in the report in addition to the ones
exported by default. The following values are supported. They
correspond to the respective attributes of a <ref name="task"
id="task">.

<tt/complete/, <tt/depends/, <tt/flags/, <tt/maxend/, <tt/maxstart/,
<tt/minend/, <tt/minstart/, <tt/note/, <tt/priority/, <tt/responsible/

</descrip>

The export report looks like a regular taskjuggler file but contains
fixed start and end dates for all tasks. The tasks only have start and
end times, their description and their project id listed. No other
attributes are exported unless they are requested using the <ref
name="taskattributes" id="export_taskattributes"> attribute.

If specified the resource usage for the tasks is reported as well. But
only those allocations are listed that belong to tasks listed in the
same export report.

The export report can be used to share certain tasks or milestones
with other projects. When an export report is included the project IDs
of the included tasks must be declared first with the <ref
name="projectid property" id="projectid">.


<sect1>flags &lt;id&gt;&lsqb;,&lt;id&gt;&rsqb;<label id="flags">
<p>
id: <ref id="id" name="ID">

Declares the specified flags. Flags can be assigned to tasks,
resources, or accounts to be used as filters during report
generation. It is legal to declare a flag more than once.

See also: <ref name="htmlaccountreport" id="htmlaccountreport">, <ref
name="htmlresourcereport" id="htmlresourcereport">, <ref
name="htmltaskreport" id="htmltaskreport">


<sect1>htmlaccountreport &lt;filename&gt;<label id="htmlaccountreport">
<p>

filename: <ref id="string" name="STRING">

<bf/Optional attributes:/
<descrip>
<label id="htmlaccountreport_accumulate">
<tag/accumulate/

If this attribute is specified the values in the calendar columns are
accumulated over the reported interval.

<label id="htmlaccountreport_caption">
<tag/caption &lt;text&gt;/
text: <ref id="string" name="STRING">

Defines the caption used for the report. The caption is printed right
above the task list.

<label id="htmlaccountreport_columns">
<tag/columns &lt;colid&gt;&lsqb;,&lt;colid&gt;&rsqb;/
colid: <ref id="id" name="ID">

Specifies which columns should be included in the task report. The
following values for colid are available:

<descrip>
<tag/no/The task index

<tag/id/The global <ref id="id" name="ID"> of a task

<tag/name/The name of a task, resource, or account

<tag/total/Total accumulated values

<tag/daily/A day-by-day calendar view of the accounts

<tag/weekly/A week-by-week calendar view of the accounts

<tag/monthly/A month-by-month calendar view of the accounts

<tag/quaterly/A quarter-by-quarter calender view of the accounts
</descrip>

<label id="htmlaccountreport_headline">
<tag/headline &lt;text&gt;/
text: <ref id="string" name="STRING">

Defines the headline used for the report. The headline is printed on
top of the page and with a larger font.

<label id="htmlaccountreport_end">
<tag/end &lt;day&gt;/
day: <ref id="date" name="DATE">

The end date for the calender view.

<label id="htmlaccountreport_hideplan">
<tag/hideplan/

Do not show the values of the plan scenario.

See also: <ref name="showactual" id="htmlaccountreport_showactual">

<label id="htmlaccountreport_rollupaccount">
<tag/rollupaccount &lt;expression&gt;/
expression: <ref id="logicalexpression" name="LOGICALEXPRESSION">

Do not show subaccounts of accounts that match the specified logical
expression.

<tag/hideaccount &lt;expression&gt;/
expression: <ref id="logicalexpression" name="LOGICALEXPRESSION">

Do not show accounts that match the specified logical expression.

<label id="htmlaccountreport_showactual">
<tag/showactual/

If this attribute is specified the values of the actual scenario are
listed.

See also: <ref name="hideplan" id="htmlaccountreport_hideplan">

<label id="htmlaccountreport_sorttasks">
<tag/sortaccounts &lt;criteria&gt;/
criteria: <ref id="sortingcriteria" name="SORTINGCRITERIA">

<label id="htmlaccountreport_start">
<tag/start &lt;day&gt;/
day: <ref id="date" name="DATE">

The start date for the calender view.

</descrip>


<sect1>htmlresourcereport &lt;filename&gt;<label id="htmlresourcereport">
<p>

filename: <ref id="string" name="STRING">

Optional attributes:

See <ref id="htmltaskreport" name="htmltaskresport">


<sect1>htmltaskreport &lt;filename&gt;<label id="htmltaskreport">
<p>

filename: <ref id="string" name="STRING">

Optional attributes:

<descrip>

<label id="htmltaskreport_caption">
<tag/caption &lt;text&gt;/
text: <ref id="string" name="STRING">

Defines the caption used for the report. The caption is printed right
above the task list.

<label id="htmltaskreport_columns">
<tag/columns &lt;colid&gt;&lsqb,&lt;colid&gt;&rsqb/
colid: <ref id="id" name="ID">

Specifies which columns should be included in the task report. The
following values for colid are available:

<descrip>
<tag/daily/A day-by-day calendar view of the tasks
<tag/depends/The task index of the tasks on which this task depends
<tag/end/The end date of a task
<tag/endbuffer/The percentage of the endbuffer
<tag/endbufferstart/The start time of the end buffer
<tag/follows/The task index of the tasks that depend on this task
<tag/id/The global <ref id="id" name="ID"> of a task
<tag/maxend/The latest desired end date
<tag/maxstart/The latest desired start date
<tag/minend/The earliest desired end date
<tag/minstart/The earliest desired start date
<tag/monthly/A month-by-month calendar view of the tasks
<tag/name/The name of a task, resource, or account
<tag/no/The task index
<tag/note/The description of the task
<tag/priority/The scheduling priority
<tag/resources/The names of the used resources
<tag/responsibilies/A list of all tasks indicies for which a resource is responsible 
<tag/responsible/The name of the resource responsible for a task
<tag/start/The start date of a task
<tag/startbuffer/The percentage of the start buffer
<tag/startbufferend/The end time of the start buffer
<tag/weekly/A week-by-week calendar view of the tasks
</descrip>

<label id="htmltaskreport_end">
<tag/end &lt;day&gt;/
day: <ref id="date" name="DATE">

The end date for the calender view.

<label id="htmltaskreport_headline">
<tag/headline &lt;text&gt;/
text: <ref id="string" name="STRING">

Defines the headline used for the report. The headline is printed on
top of the page and with a larger font.

<label id="htmltaskreport_hidesource">
<tag/hideresource &lt;expression&gt;/
expression: <ref id="logicalexpression" name="LOGICALEXPRESSION">

List only resources that do not have flags meeting the described logical
expression.

<label id="htmltaskreport_hidetask">
<tag/hidetask &lt;expression&gt;/
expression: <ref id="logicalexpression" name="LOGICALEXPRESSION">

List only tasks that do not have flags meeting the described logical
expression.

<label id="htmltaskreport_rawhead">
<tag/rawhead &lt;html&gt;/

html: <ref id="string" name="STRING">

The <tt/rawhead/ attribute can be used to insert HTML code between the
<ref name="caption" id="htmltaskreport_caption"> and the table.

<label id="htmltaskreport_rawstylesheet">
<tag/rawstylesheet &lt;html&gt;/

html: <ref id="string" name="STRING">

The <tt/rawstylesheet/ attribute can be used to change the stylesheet
of the htmlreport. The default stylesheet looks similar to this one:

<verb>
.default { background-color:#f3ebae; font-size:70%; text-align:center }
.defaultlight { background-color:#fffadd; font-size:70%; text-align:center }
.task { background-color:#f3ebae; font-size:100%; text-align:left }
.tasklight { background-color:#fffadd; font-size:100%; text-align:left }
.available { background-color:#a4ff8d; font-size:70%; text-align:center }
.vacation { background-color:#fffc60; font-size:70%; text-align:center }
.weekend { background-color:#ffec80; font-size:70%; text-align:center }
.milestone { background-color:#ff2a2a; font-size:70%; text-align:center }
.booked { background-color:#ff9191; font-size:70%; text-align:center }
.bookedlight { background-color:#ffbfbf; font-size:70%; text-align:center }
.headersmall { background-color:#a5c2ff; font-size:70%; text-align:center }
.headerbig { background-color:#a5c2ff; font-size:110%; font-weight:bold; text-align:center }
.completed { background-color:#87ff75; font-size:70%; text-align:center }
.completedlight { background-color:#a1ff9a; font-size:70%; text-align:center }
.today { background-color:#a387ff; font-size:70%; text-align:center }
</verb>

<label id="htmltaskreport_rawtail">
<tag/rawtail &lt;html&gt;/

html: <ref id="string" name="STRING">

The <tt/rawtail/ attribute can be used to insert raw html code after
the table.

<label id="htmltaskreport_rollupresource">
<tag/rollupresource &lt;expression&gt;/
expression: <ref id="logicalexpression" name="LOGICALEXPRESSION">

Do not show subresources of resources with flags meeting the
described logical expression.

<label id="htmltaskreport_rolluptask">
<tag/rolluptask &lt;expression&gt;/
expression: <ref id="logicalexpression" name="LOGICALEXPRESSION">

Do not show subtasks of tasks with flags meeting the described
logical expression.

<label id="htmltaskreport_showactual">
<tag/showactual/
If used, not only the plan values are listed in the table, but also the
actual values. The actual values are put underneath the plan values.

<label id="htmltaskreport_sorttasks">
<tag/sorttasks &lt;criteria&gt;/

criteria: <ref id="sortingcriteria" name="SORTINGCRITERIA">

The sorting criteria specifies how the tasks in the generated report
will be sorted. Possible values are:

<descrip>
<tag/tasktree/This is the default and creates a list with subtasks
indented and grouped together. If this sorting is used, parent tasks
are shown when subtasks are not hidden, even if the parent task
matches the hide expression.

<tag/tree/Show nesting with indentation

<tag/indexup/Last index on top

<tag/indexdown/First index on top

<tag/idup/Last <ref id="id" name="ID"> on top

<tag/iddown/First <ref id="id" name="ID"> on top

<tag/fullnameup/Last full name on top

<tag/fullnamedown/First full name on top

<tag/nameup/Last name on top

<tag/namedown/First name on top

<tag/startup/Latest start date on top

<tag/startdown/Earliest start date on top

<tag/endup/Latest end date on top

<tag/enddown/Earliest end date on top

<tag/priorityup/Lowest priority on top

<tag/prioritydown/Highest priority on top

<tag/responsibleup/Last name of responsible on top

<tag/responsibledown/First name of responsible on top

<tag/mineffortup/Smallest minimal effort on top

<tag/mineffortdown/Largest minimal effort on top

<tag/maxeffortup/Smallest maximum effort on top

<tag/maxeffortdown/Largest maximum effort on top

<tag/rateup/Smallest rate on top

<tag/ratedown/Largest rate on top

<tag/kotrusidup/Last kotrusid on top

<tag/kotrusiddown/First kotrusid on top
</descrip>

<label id="htmltaskreport_start">
<tag/start &lt;day&gt;/
day: <ref id="date" name="DATE">

The start date for the calender view.

<label id="htmltaskreport_url">
<tag/url &lt;id&gt; &lt;href&gt;/
id: The ID specifies the location of the HTML report where the url
should appear. The following IDs are currently supported:

<descrip>
<tag/dayheader/The number of the day in daily calendars. Available
macros: day, month, year
<tag/monthheader/The name of the month in weekly or monthly calendars.
Available macros: day, month year
<tag/resourcename/The name of the resource. Available macros:
resourceid
<tag/taskname/The name of the task. Available macros: taskid
<tag/weekheader/The number of the week in weekly calendars. Available
macros: day, month, year
<tag/yearheader/The number of the year in yearly calendars. Available
macros: day, month, year
</descrip>

href: A string pattern that is used to create the embedded URLs. This
pattern may contain macros which are expanded during the report
generation. The availability of the macros and their contense depends
on the specified ID. To protect the macros from beeing expanded during
file reading the macros in the URL string need to be started with two
$ signs.

Example:
<tt>url taskname "TaskList-Weekly.html#task_$${taskid}"</tt>

This attaches a hyperlink to all task names in the report. The
hyperlinks point to anchors in a file called "TaskList-Weekly.html".
Taskjuggler automatically generates anchors in reports. The ID of the
anchors is task_<tt/&lt;taskid&gt;/ or
resource_<tt/&lt;resourceid&gt;/.

<tt>url monthheader "Resources-2002-$${month}.html"</tt>

This attaches a hyperlink to all month names in a monthly or weekly
calendar header. The links point to files that contain the number of
the month in the file name. The number is always two digits and
prefixed with a 0 if necessary. The year marco expands to 4 digits.

</descrip>

Generates a report of all tasks (excluding hidden and filtered) in
HTML format. Multiple declarations of htmltaskreport can be made to
generate several different reports with one run of TaskJuggler.


<sect1>icalreport &lt;filename&gt;<label id="icalreport">
<p>

filename: <ref id="string" name="STRING">

create an ical calender format output file which can be imported
to korganiser.


<sect1>include &lt;filename&gt;<label id="include">
<p>
filename: <ref id="string" name="STRING">

Includes the specified file name as if its contents would be written
instead of the include property. include commands can be used within
global scope or between property declarations of tasks, resources, and
accounts.


<sect1>kotrusmode &lt;mode&gt;<label id="kotrusmode">
<p>

mode: <ref id="string" name="STRING">

sets the kotrus mode. Valid values are
<itemize>
<item>'NoKotrus' for no KoTrus connection
<item>'XML' to read from an XML file (not yet supported)
<item>'DB' to read from database configured in your .taskjugglerrc
</itemize>


<sect1>macro &lt;id&gt; &lsqb; body &rsqb;<label id="macro">
<p>
id: <ref id="id" name="ID">

The body is not optional. It must be enclosed in [ ]. Macros can be
declared like this:

<descrip>
<tag/macro FOO &lsqb; This text &rsqb;/

If later ${FOO} is found in the project file, it is expanded to ' This
text '. Macros may have arguments. Arguments are special macros with
numbers as names. The number specifies the index of the argument.

<tag/macro FOO &lsqb; This ${1} text &rsqb;/

will expand to ' This stupid text ' if called as ${FOO
"stupid"}. Macros may call other macros.
</descrip>

Macro <ref id="id" name="ID">s should have at least one uppercase letter as all lowercase
letter <ref id="id" name="ID">s may be used in a later version for built-in macros like 'if',
'expr' or 'for'.


<sect1>maxeffort &lt;value&gt;<label id="maxeffort">
<p>
value: <ref id="real" name="REAL">

The default daily maximum effort for a resource. Resources will not be
scheduled more than this value. This value will be used for all
subsequent resource declarations unless specified otherwise.


<sect1>mineffort &lt;value&gt;<label id="mineffort">
<p>
value: <ref id="real" name="REAL">

The default daily minimum effort for a resource. Resources that are
used less than this value will be marked in the report. This value
will be used for all subsequent resource declarations unless specified
otherwise.


<label id="now">
<sect1>now &lt;sometime&gt;
<p>
sometime: <ref id="date" name="DATE">

Use the specified day and time for computation of the project status
instead of the current moment.


<sect1>priority &lt;value&gt;<label id="priority">
<p>
value: <ref id="integer" name="INTEGER">

The default scheduling priority for tasks. The value must be between 1
and 1000 and is inherited by all tasks if no other priority is
specified. The default value is 500.


<sect1>project &lt;id&gt; &lt;name&gt; &lt;version&gt; &lt;start&gt;
&lt;end&gt;<label id="project">
<p>
id: <ref id="id" name="ID"> 

name: <ref id="string" name="STRING"> 

version: <ref id="string" name="STRING">

start: <ref id="date" name="DATE">

end: <ref id="date" name="DATE">

Optional attributes: none

The project property is mandatory and should be the first property in
a project file. &lt;id&gt; is the default project <ref id="id"
name="ID"> used to register resource allocations in a global database.
&lt;name&gt; is the name of the project. &lt;version&gt; is the
version of the project file. Typically this is the CVS ID.
&lt;start&gt; and &lt;end&gt; define the time frame of the project.
The end may be well after the end of the last task, but must be
specified to terminate the scheduling process.


<label id="projectid">
<sect1>projectid &lt;id&gt;
<p>
id: <ref id="id" name="ID">

This property adds a new project ID to the project. The project ID is
then the new active project ID and all subsequent top-level task will
inherit this ID.

See also: <ref name="projectid" id="task_projectid">


<label id="rate">
<sect1>rate &lt;money&gt;<label id="rate">
<p>
money: <ref id="real" name="REAL">

The default daily rate for using a resource full-time. This value will
be used for all subsequent resource declarations unless specified
otherwise.


<label id="resource">
<sect1>resource &lt;id&gt; &lt;name&gt;
<p>

id: <ref id="id" name="ID">

name: <ref id="string" name="STRING">

Optional attributes:

<descrip>

<label id="resource_actualbooking">
<tag/actualbooking &lt;from&gt; &lt;to&gt; &lt;project&gt; &lt;task&gt;/ 
from: <ref id="date" name="DATE">

to: <ref id="date" name="DATE">

task: <ref id="id" name="ID">

Assigns the resource for the specified interval to the specified task.
This assignment is used for the actual scenario.


<label id="resource_efficiency">
<tag/efficiency &lt;value&gt;/ 
value: <ref id="real" name="REAL">

The efficiency of the resource. This can be used to describe a team as
a resource. A team of five should have an efficiency of 5.0.


<label id="resource_kotrusid">
<tag/kotrusid &lt;id&gt;/ 
id: <ref id="string" name="STRING">

The KoTrus <ref id="id" name="ID"> of the resource (e-mail address).


<label id="resource_maxeffort">
<tag/maxeffort &lt;value&gt;/ 
value: <ref id="real" name="REAL">

The daily maximum effort for a resource. Resources will not be
scheduled to be used more than this value. A value of 1.0 means a full
working day. 0.5 means half a working day.


<label id="resource_mineffort">
<tag/mineffort &lt;value&gt;/ 
value: <ref id="real" name="REAL">

The daily minimum effort for a resource. Resources that are used less
than this value will be marked in the report.


<label id="resource_planbooking">
<tag/planbooking &lt;from&gt; &lt;to&gt; &lt;project&gt; &lt;task&gt;/ 
from: <ref id="date" name="DATE">

to: <ref id="date" name="DATE">

task: <ref id="id" name="ID">

Assigns the resource for the specified interval to the specified task.
This assignment is used for the plan scenario.


<label id="resource_rate">
<tag/rate &lt;value&gt;/ 
value: <ref id="real" name="REAL">

The daily costs of the resource.


<label id="resource_resource">
<tag/resource &lt;id&gt; &lt;name&gt;/ 

Resources may be nested to create groups. A nested resource inherits
the attributes of the parent resource. Only those attributes specified
prior to the declaration of the nested resource are inherited.


<label id="resource_shift">
<tag/shift &lt;id&gt; [&lt;from&gt; [- &lt;to&gt;]]/
id: <ref id="id" name="ID">

from: <ref id="date" name="DATE">

to: <ref id="date" name="DATE">

Assigns the resource to a defined shift during the specified interval.
Multiple shifts can be defined, but shift invervals may not overlap.


<label id="resource_vacation">
<tag/vacation &lt;from&gt; &lsqb;- &lt;to&gt;&rsqb;/
from: <ref id="date" name="DATE">

to: <ref id="date" name="DATE">

Specifies a vacation for a resource. The to value is NOT included in
the vacation. It specifies the first second after the vacation.


<label id="resource_workinghours">
<tag/workinghours &lt;weekday&gt; &lt;from&gt; -
&lt;to&gt;&lsqb;,&lt;from&gt;-&lt;to&gt;&rsqb;/
weekday: <ref id="weekday" name="WEEKDAY">

from: <ref id="time" name="TIME">

to: <ref id="time" name="TIME">

Sets the working hours to the specified intervals. If no hours are
specified for a day, the global definitions are used.

See also: <ref id="workinghours" name="workinghours">

</descrip>


<sect1>shift &lt;id&gt; &lt;name&gt;<label id="shift">
<p>
id: <ref id="id" name="ID">

name: <ref id="string" name="STRING">

The following optional parameter may be used. At least one optional
parameter must be specified.

<descrip>
<label id="shift_shift">
<tag/shift &lt;id&gt; &lt;name&gt;/
id: <ref id="id" name="ID">

name: <ref id="string" name="STRING">

Shifts may be nested. A nested shift inherits the attributes of the
enclosing shift.

<label id="shift_workinghours">
<tag/workinghours &lt;weekday&gt; &lt;from&gt;-&lt;to&gt;&lsqb;,&lt;from&gt;-&lt;to&gt;&rsqb/
weekday: <ref id="weekday" name="WEEKDAY">

from: <ref id="time" name="TIME">

to: <ref id="time" name="TIME">

Sets the working hours to the specified intervals. If no hours are
specified for a day, the global definitions are used. If no working
hours should be specified for a day, the keyword 'off' must be used
instead of the time interval.

See also: <ref id="workinghours" name="workinghours">, <ref
id="resource_workinghours" name="resource">

</descrip>

When several resource have the same working hours, these working hours
should be defined as shifts. Each shift must have a unique <ref
id="id" name="ID">. Resources can be assigned to shifts for certain
intervals. Ref.  Resources.


<label id="supplement">
<sect1>supplement &lt;task|resource&gt; &lt;ID&gt;
<p>
ID: <ref id="id">
<p>
The supplement keyword provides a mechanism to add more attributes to
already defined tasks or resources. The additional attributes must
obey the same rules as in regular task or resource definitions and
must be enclosed by curly braces.

This construct is primerily meant for situations where the information
about a task or resource is split over serveral files. E. g. the
vacation dates for the resources may be in a seperate file that was
generated by some other tool.


<sect1>task &lt;id&gt; &lt;name&gt;<label id="task">
<p>

id: <ref id="id" name="ID">

name: <ref id="string" name="STRING">

<bf/Optional attributes:/
<descrip>
<label id="task_account">
<tag/account &lt;id&gt;/
id: <ref id="id" name="ID">

Specifies the account to which all money associated with this task will be
credited.

This attribute is inherited by subtasks if specified prior to the
definition of the subtask.

See also: <ref name="account" id="account">


<label id="task_actualend">
<tag/actualend &lt;date&gt;/
date: <ref id="date" name="DATE">

The actual end date of the task. This can be specified to compare the
planned and actual dates.

See also: <ref name="end" id="task_end">, <ref name="actualstart"
id="task_actualstart">


<label id="task_actualstart">
<tag/actualstart &lt;date&gt;/
date: <ref id="date" name="DATE">

The actual start date of the task. This can be specified to compare the planned 
and actual dates.

See also: <ref name="start" id="task_start">, <ref name="actualend"
id="task_actualend">


<tag/allocate &lt;id&gt;/
id: <ref id="id" name="ID">

<bf/Optional attributes:/
<descrip>
<tag/alternative &lt;id&gt;&lsqb,&lt;id&gt;&rsqb;/
id: <ref id="id" name="ID">

Specifies <ref id="id" name="ID">s of alternative <ref
name="resources" id="resource">. One of the alternatives will be used
if the main resource is not available.  If multiple resources are
used, they must be separated by commas.

<tag/load &lt;days&gt;/
days: <ref id="real" name="REAL">

Specifies how many days the <ref name="resource" id="resource"> can be
used per day for this task. A load of 0.5 means that the resource will
be used for at most half a working day for this task.

<label id="task_allocate_shift">
<tag/shift &lt;id&gt; [&lt;from&gt; [- &lt;to&gt;]]/
id: <ref id="id" name="ID">

from: <ref id="date" name="DATE">

to: <ref id="date" name="DATE">

Limits the allocation activity to the shifts within the specified interval.
Multiple shifts can be defined, but shift invervals may not overlap.

<tag/persistent/

If set, the first available resource out of the specified resource and
its specified alternatives will be used for the entire task.
</descrip>


Specifies a resource that can be used to
fulfill the task. More than one resource can be specified for a task.
All resources must be declared before they can be used.

Resource allocations are mandatory for <ref name="effort"
id="task_effort"> based tasks. Task with a <ref name="length"
id="task_length"> or <ref name="duration" id="task_duration">
specification may have resources allocated, but do not require them.

Tasks may not have subtasks if this attribute is used.


<label id="task_complete">
<tag/complete &lt;percent&gt;/
percent: <ref id="integer" name="INTEGER">

Specifies what percentage of the task is already completed. This can be
useful for project tracking.

Tasks may not have subtasks if this attribute is used.


<label id="task_depends">
<tag/depends &lt;id&gt;&lsqb,&lt;id&gt;&rsqb;/
id: GLOBAL_<ref id="id" name="ID">

Specifies that the task cannot start before the task with the
specified <ref id="id" name="ID">s have been finished. If multiple
<ref id="id" name="ID">s are specified, they must be separated by
commas. IDs must be either global or relative. A relative <ref id="id"
name="ID"> starts with a number of '!'. Each '!' moves the scope to
the parent task. Global <ref id="id" name="ID">s do not contain '!',
but have <ref id="id" name="ID">s separated by dots.

Example:
<tscreen><verb>
task foo1 {
   task foo2 { start 2002-12-04 }
   task foo3 { depends !foo2 }
}
task bar { depends foo1.foo2 }
</verb></tscreen>

By using the 'depends' attribute, the scheduling policy is
automatically set to ASAP. If 'depends' and 'preceeds' are used, the
last policy counts.

See also: <ref name="scheduling" id="task_scheduling">, <ref
name="preceeds" id="task_preceeds">


<label id="task_duration">
<tag/duration &lt;number&gt; &lt;unit&gt;/
number: <ref id="real" name="REAL">

unit: <ref id="unit" name="UNIT">

Specifies the time the task occupies the resources. This is calender
time, not working time. 7d means one week.

Tasks may not have subtasks if this attribute is used.

See also: <ref name="effort" id="task_effort">, <ref name="length"
id="task_length">

<label id="task_effort">
<tag/effort &lt;number&gt; &lt;unit&gt;/
number: <ref id="real" name="REAL">

unit: <ref id="unit" name="UNIT">

Specifies the effort needed to complete the task. An effort of 4d can
be done with 2 full-time resources in 2 days.

WARNING: In almost all real world projects effort is not the product
of time and resources. This is only true if the task can be
partitioned without adding any overhead. For more information about
this read "The Mythical Man-Month" by Frederick P. Brooks, Jr.

Tasks may not have subtasks if this attribute is used.

See also: <ref name="duration" id="task_duration">, <ref name="length"
id="task_length">


<label id="task_end">
<tag/end &lt;date&gt;/
date: <ref id="date" name="DATE">

The planned end date for the task. If no end date is given, the
task must depend on other tasks. If no dependency is given, the project
start date is used. Setting an end date will switch the scheduling
policy to ALAP.

See also: <ref name="actualend" id="task_actualend">, <ref
name="start" id="task_start">


<label id="task_endbuffer">
<tag/endbuffer &lt;percent&gt;/
percent: <ref id="real" name="REAL"> or <ref id="integer"
name="INTEGER">

The end buffer specifies how many percent of the specified length,
duration or effort may be shortened at the end. This value is soley
for documentational purposes. It is not used for scheduling. You can
specify <tt/startbuffer/ or <tt/endbuffer/ values to document, that
you might have some extra time to squeeze out if needed.

See also: <ref name="startbuffer" id="task_startbuffer">


<label id="task_endcredit">
<tag/endcredit &lt;amount&gt;/
amount: <ref id="real" name="REAL">

Specifies an amount that is credited to the account specified by the
<ref name="account" id="task_account"> property at the moment the
tasks ends.

See also: <ref name="startcredit" id="task_startcredit">


<label id="task_flags">
<tag/flags &lt;id&gt;&lsqb;,&lt;id&gt;&rsqb;/
id: <ref id="id" name="ID">

Attaches flags to the task. Flags can be used to filter tasks from the
the output. Flags must be <ref name="declared" id="flags"> before they
can be used. 

Flags are inherited by subtasks from their parent tasks if they are
declared before the subtask. Flags that are declared after the subtasks 
are not inherited.


<label id="task_length">
<tag/length &lt;number&gt; &lt;unit&gt;/
number: <ref id="real" name="REAL">

unit: <ref id="unit" name="UNIT">

Specifies the time the task occupies the resources. This is working
time, not calender time. 7d means 7 working days, not one week.
Whether a day is considered a working day or not depends on the
defined <ref id="workinghours" name="working hours"> and global <ref
id="vacation" name="vacations">.

Tasks may not have subtasks if this attribute is used.

See also: <ref name="duration" id="task_duration">, <ref name="effort"
id="task_effort">


<label id="task_maxend">
<tag/maxend &lt;date&gt;/
date: <ref id="date" name="DATE">

The latest desired end date for the task. If this date cannot be
met, the task is marked in the task list.

This attribute is inherited by subtasks.

See also: <ref name="minend" id="task_minend">


<label id="task_maxstart">
<tag/maxstart &lt;date&gt;/
date: <ref id="date" name="DATE">

The latest desired start date for the task. If this date cannot be
met, the task is marked in the task list.

This attribute is inherited by subtasks.

See also: <ref name="minstart" id="task_minstart">


<label id="task_minend">
<tag/minend &lt;date&gt;/
date: <ref id="date" name="DATE">

The earliest desired end date for the task. If this date cannot be
met, the task is marked in the task list.

This attribute is inherited by subtasks.


<label id="task_minstart">
<tag/minstart &lt;date&gt;/
date: <ref id="date" name="DATE">

The earliest desired start date for the task. If this date cannot
be met, the task is marked in the task list.

This attribute is inherited by subtasks.

See also: <ref name="maxstart" id="task_maxstart">


<label id="task_note">
<tag/note &lt;text&gt;/
text: <ref id="string" name="STRING">

A longer description of the task.


<label id="task_preceeds">
<tag/preceeds &lt;id&gt;&lsqb;,&lt;id&gt;&rsqb;/
id: GLOBAL_<ref id="id" name="ID">

Specifies that this task preceeds the tasks with the specified <ref
id="id" name="ID">s. If multiple tasks are specified, they must be
separated by commas. The format is equivalent to the 'depends'
attribute.

By using the <tt/preceeds/ attribute, the <ref name="scheduling
policy" id="task_scheduling"> is automatically set to ALAP. If
<ref name="depends" id="task_depends"> and <tt/preceeds/ are used, the
last policy counts.


<label id="task_priority">
<tag/priority &lt;value&gt;/
value: <ref id="integer" name="INTEGER">

Specifies a priority between 1 and 1000. A task with higher priority
is more likely to get the requested resources.

This attribute is inherited by subtasks if specified prior to the
definition of the subtask.


<label id="task_projectid">
<tag/projectid &lt;id&gt;/
id: <ref id="id" name="ID">

Assings the specified project ID to the task. This will overwrite the
inherited project id. Subtasks that are defined after a <tt/projectid/
statement will inherit the project ID.

See also: <ref name="projectid" id="projectid">


<label id="task_responsible">
<tag/responsible &lt;id&gt;/
id: <ref id="id" name="ID">

The ID of the resource that is responsible for this task.

This attribute is inherited by subtasks if specified prior to the
definition of the subtask.


<label id="task_scheduling">
<tag/scheduling &lt;policy&gt;/
policy: <ref id="id" name="ID">

This specifies the scheduling policy for the task. Possible values are:

<descrip>
<tag/ALAP/As late as possible. The task is scheduled to happen as late as
possible.

<tag/ASAP/As soon as possible. The task is scheduled to happen as early as
possible.
</descrip>

The scheduling policy is automatically changed if the <ref
name="depends" id="task_depends"> or <ref name="preceeds"
id="task_preceeds"> attributes are used. If multiple attributes that
affect the scheduling policy are used, that last attribute determines
the effective policy.


<label id="task_shift">
<tag/shift &lt;id&gt; [&lt;from&gt; [- &lt;to&gt;]]/
id: <ref id="id" name="ID">

from: <ref id="date" name="DATE">

to: <ref id="date" name="DATE">

Limits the task activity to the shifts within the specified interval.
Multiple shifts can be defined, but shift invervals may not overlap.

<label id="task_start">
<tag/start &lt;date&gt;/
date: <ref id="date" name="DATE">

The planned start date for the task. If no start date is given,
the task must depend on other tasks. If no dependency is given, the
project start date is used. Setting a start date will switch the
scheduling policy to ASAP.

See also: <ref name="actualstart" id="task_actualstart">, <ref
name="end" id="task_end">


<label id="task_startbuffer">
<tag/startbuffer &lt;percent&gt;/
percent: <ref id="real" name="REAL"> or <ref id="integer"
name="INTEGER">

The start buffer specifies how many percent of the specified length,
duration or effort may be shortened at the begining of the task. This
value is soley for documentational purposes. It is not used for
scheduling. You can specify <tt/startbuffer/ or <tt/endbuffer/ values
to document, that you might have some extra time to squeeze out if
needed.

See also: <ref id="task_endbuffer" name="endbuffer">


<label id="task_startcredit">
<tag/startcredit &lt;amount&gt;/
amount: <ref id="real" name="REAL">

Specifies an amount that is credited to the account specified by the
<ref name="account" id="task_account"> property at the moment the
tasks starts.

See also: <ref name="account" id="account">, <ref name="endcredit"
id="task_endcredit">


<label id="task_task">
<tag/task &lt;id&gt; &lt;name&gt;/
id: <ref id="id" name="ID">

name: <ref id="string" name="STRING">

A task may have subtasks. If subtasks are specified, many of the
other attributes are illegal. See attributes for details.


</descrip>

Tasks may be nested and some attributes are inherited by the subtasks.


<label id="timinigresolution">
<sect1>timingresolution &lt;value&gt; &lt;unit&gt;<label id="timingresolution">
<p>
value: INTERGER

unit: <ref id="unit" name="UNIT">

Sets the minimum timing resolution. The smaller the value, the longer
the schedulings process requires. The default is 1 hour. The smallest
value is 5 min.


<label id="vacation">
<sect1>vacation name &lt;start&gt; &lsqb;- &lt;end&gt;&rsqb;<label id="vacationname">
<p>
name: <ref id="string" name="STRING">

start: <ref id="date" name="DATE">

end: <ref id="date" name="DATE">

Defines a vacation period for all resources. The end value is NOT part
of the vacation. So 2001-12-24 - 2001-12-25 specifies one day of
vacation, not two days.


<label id="workinghours">
<sect1>workinghours &lt;weekday&gt; &lt;from&gt;-&lt;to&gt;&lsqb;,&lt;from&gt;-&lt;to&gt;&rsqb;<label id="hours">
<p>
weekday: <ref id="weekday" name="WEEKDAY">

from: <ref id="time" name="TIME">

to: <ref id="time" name="TIME">

Sets the working hours to the specified intervals. The values are used
as default values for all resources defined afterwards. The default
values are 08:00-12:00 and 13:00-17:00 from Mon - Fri. A day that has
no defined working hours is not considered a working day when
determining the <ref name="length" id="task_length"> of a task.

See also: <ref id="resource_workinghours" name="resource">, <ref
id="shift_workinghours" name="shift">


<label id="workinghoursperday">
<sect1>workinghoursperday &lt;value&gt;<label id="workinghoursperday">
<p>
value: <ref id="integer" name="INTEGER">

Specifies the number of working hours per day. This value is used to
calculate the daily load from the number of booked hours. If
workingHoursPerDay is set to 8 and a resource is used for 12 hours on
a day, the daily load is 1.5. Change this value with care as it
affects many internal calculations.


<sect1>xmltaskreport &lt;filename&gt;<label id="xmltaskreport">
<p>

filename: <ref id="string" name="STRING">

create a xml task report to the given file. Note that this is still
experimental. The format might change in future releases.


<sect>The Example: Accounting Software<label id="example">
<p>

<tscreen><verb>
project fibu "Accounting Software" "1.0" 2002-01-16 2002-06-30

now 2002-02-17

# The daily rate of all resources
rate 310.0
currency "EUR"

# This is one way to form teams
macro allocate_developers [
  allocate dev1
  allocate dev2 { load 0.5 }
  allocate dev3
]

resource dev "Developers" {
  resource dev1 "Paul Smith"
  resource dev2 "Larry Bono"
  resource dev3 "Klaus Mueller" { vacation 2002-02-01 - 2002-02-05 }
}
resource misc "The others" {
  resource test "Peter Murphy" { maxeffort 0.8 rate 240.0 }
  resource doc "Dim Sung"
}

account dev "Development" cost {}
account doc "Dokumentation" cost {}
account rev "Payments" revenue {}

task AcSo "Accounting Software" {

  account dev

  task spec "Spezification" {
    effort 20d
    ${allocate_developers}
    depends !deliveries.start
  }

  task software "Software development" {

    priority 1000

    task database "Database coupling" {
      effort 20d
      depends !!spec
      allocate dev1
      allocate dev2
    }

    task gui "Graphical user interface" {
      effort 35d
      actualeffort 40d
      depends !database, !backend
      allocate dev2
      allocate dev3
    }

    task backend "Backend functions" {
      effort 30d
      complete 100
      depends !database, !!spec
      allocate dev1
      allocate dev2
    }
    
  }

  task test "Software testing" {

    task alpha "Alpha test" {
      effort 1w
      depends !!software
      allocate test
      allocate dev2
    }

    task beta "Beta test" {
      effort 4w
      depends !alpha
      allocate test
      allocate dev1
    }
  }

  task manual "Manual" {
    effort 10w
    depends !deliveries.start
    allocate doc
    allocate dev3
    account doc
  }

  task deliveries "Ship to customer" {

    account rev

    task start "Projectstart" {
      milestone
      start 2002-01-16
      actualstart 2002-01-20
      startcredit 30000.0
    }

    task beta "Betaversion" {
      milestone
      depends !!test.alpha
      startcredit 10000.0
    }

    task done "Ship product to customer" {
      milestone
      maxend 2002-04-17
      depends !!test.beta, !!manual
      startcredit 20000.0
    }
  }
}

htmltaskreport "tasks.html" name,start,end,resources,weekly
</verb></tscreen>

<sect>Questions and Answers<p>

<sect>Copyright<p>

TaskJuggler Copyright 2001, 2002 Chris Schlaeger &lt;cs@suse.de&gt;


This program is free software. You can redistribute it and modify it
under the terms of the GNU General Public License version 2 as
published by the Free Software Foundation. 

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

<p>

<sect>Trademarks<p>

Linux is a registered trademark of Linus Torvalds.

UNIX is a registered trademark and The Open Group is a trademark of
The Open Group in the US and other countries.

TaskJuggler is a trademark of Chris Schlaeger.

</article>
